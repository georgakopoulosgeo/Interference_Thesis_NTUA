PREDICTOR API

################################################ FOLDER STRUCTURE
/nginx-predictor
│── app.py                          # Flask API (your main application)
│── requirements.txt                # Python dependencies
│── Dockerfile                      # Image build instructions
│── predictor-api-deployment.yaml   # Kubernetes deployment+service
│── /models                         # Directory for model files / Probably in a separate Folder ** 
│   ├── model_replicas_1.pkl
│   ├── model_replicas_2.pkl
│   ├── model_replicas_3.pkl
│   └── model_replicas_4.pkl

################################################ WORKFLOW
1. HTTP POST Request:
   - Endpoint: `/predict`
   - Body: JSON with {"metrics": [list_of_values], "replicas": 1-4}

2. API Action:
   - Selects model based on "replicas" value
   - Runs prediction on "metrics"
   - Returns {"slowdown": float}

3. Example Call:
   curl -X POST http://predictor-service/predict \
     -d '{"metrics": [0.9,15000,500], "replicas": 2}'



################################################ MINIKUBE ACCESSIBILITY
# 1. Build and load image (no registry needed)
docker build -t predictor-api:v1 .
minikube image load predictor-api

# 2. Deploy
kubectl apply -f predictor-api-deployment.yaml

# 3. Access from:
# - Other pods: http://predictor-service
# - Host machine:
minikube service predictor-service --url

kubectl port-forward svc/predictor-service 8080:80

Help Commands
- Verify deployment status
kubectl get deployments -l app=predictor-api
- Check pods
kubectl get pods -l app=predictor-api
- Check service
kubectl get svc predictor-api
- View logs (for one of the pods)
kubectl logs -f <pod-name> -c predictor
- Check service endpoints
kubectl get endpoints predictor-api
- Test from within cluster
kubectl run -it --rm --restart=Never test-curl --image=curlimages/curl -- curl -v http://predictor-api:5000/health

    curl -X POST \
    http://192.168.49.2:32124/predict \
    -H "Content-Type: application/json" \
    -d '{"replicas": 2, "rps": 1500}'

curl http://192.168.49.2:32124/health

################################################ FUTURE IMPROVEMENTS
- Add gunicorn with multiple workers
- Implement prediction caching
- Request latency tracking
- Model versioning (A/B testing)
- Batch prediction endpoint
- Request authentication
- Rate limiting
- Custom metrics for HPA


################################################ PCM METRICS FORMAT
System - Date,System - Time,System_IPC,System_L3MISS,System_L2MISS,System_READ,System_WRITE,System_PhysIPC,System_PhysIPC%,System Core C-States_C0res%,System Core C-States_C1res%,System Core C-States_C6res%,System Pack C-States_C0res%,System Pack C-States_C6res%,Core0 (Socket-1)_IPC,Core0 (Socket-1)_L3MISS,Core0 (Socket-1)_L2MISS,Core0 (Socket-1)_C0res%,Core0 (Socket-1)_C1res%,Core0 (Socket-1)_C6res%,Core0 (Socket-1)_PhysIPC,Core0 (Socket-1)_PhysIPC%,Core1 (Socket-1)_IPC,Core1 (Socket-1)_L3MISS,Core1 (Socket-1)_L2MISS,Core1 (Socket-1)_C0res%,Core1 (Socket-1)_C1res%,Core1 (Socket-1)_C6res%,Core1 (Socket-1)_PhysIPC,Core1 (Socket-1)_PhysIPC%,Core2 (Socket-1)_IPC,Core2 (Socket-1)_L3MISS,Core2 (Socket-1)_L2MISS,Core2 (Socket-1)_C0res%,Core2 (Socket-1)_C1res%,Core2 (Socket-1)_C6res%,Core2 (Socket-1)_PhysIPC,Core2 (Socket-1)_PhysIPC%,Core3 (Socket 0)_IPC,Core3 (Socket 0)_L3MISS,Core3 (Socket 0)_L2MISS,Core3 (Socket 0)_C0res%,Core3 (Socket 0)_C1res%,Core3 (Socket 0)_C6res%,Core3 (Socket 0)_PhysIPC,Core3 (Socket 0)_PhysIPC%,Core4 (Socket 0)_IPC,Core4 (Socket 0)_L3MISS,Core4 (Socket 0)_L2MISS,Core4 (Socket 0)_C0res%,Core4 (Socket 0)_C1res%,Core4 (Socket 0)_C6res%,Core4 (Socket 0)_PhysIPC,Core4 (Socket 0)_PhysIPC%,Core5 (Socket 0)_IPC,Core5 (Socket 0)_L3MISS,Core5 (Socket 0)_L2MISS,Core5 (Socket 0)_C0res%,Core5 (Socket 0)_C1res%,Core5 (Socket 0)_C6res%,Core5 (Socket 0)_PhysIPC,Core5 (Socket 0)_PhysIPC%,node_name,assigned_cores
